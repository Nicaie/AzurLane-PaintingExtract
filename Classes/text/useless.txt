def add_new(self, event):
    dialog = AddDialog(self, self.azur_lane.tex_name, self.azur_lane.names, self.start_path)

    if dialog.ShowModal() == 0:
        with open(self.start_path + '\\files\\names.json', 'r')as file:
            self.names = json.load(file)


def compare(self, event):
    compare = CompareDialog(self)

    if compare.ShowModal() == 0:
        pass


def change_name(self, event):
    dialog = ChangeNameDialog(self, self.start_path)
    if dialog.ShowModal() == 0:
        with open(self.start_path + '\\files\\names.json', 'r')as file:
            self.names = json.load(file)

            if not len(paths) == 0:
                num = 0
                for path in paths:

                    num += 1
                    if self.pattern_mesh.match(path) is not None:
                        name = path.split('\\')[-1].split('.')[0].replace('-mesh', '')
                    else:
                        continue

                    if name not in self.mesh_name:
                        self.mesh_list_path_dir[name] = path
                        self.mesh_name.append(name)
                        try:
                            self.mesh_name_china.append(f"{num}）{self.names[name]}——{name}")
                            self._searched_mesh.append(f"{self.names[name]}{name}")
                        except KeyError:
                            self.mesh_name_china.append(f"{num}）{name}——{name}")
                            self._searched_mesh.append(f"{name}")
self.form.m_gauge_mesh_load.SetValue(25)
            num = 0
            for path in paths.keys():
                if self.pattern_mesh.match(path) is not None:
                    name = path.split('\\')[-1].split('.')[0].replace('-mesh', '')
                else:
                    continue
                if name not in self.mesh_name:
                    self.mesh_list_path_dir[name] = paths[path]
                    self.mesh_name.append(name)
                    try:
                        self.mesh_name_china.append(f"{num}）{self.names[name]}——{name}")
                        self._searched_mesh.append(f"{self.names[name]}{name}")
                    except KeyError:
                        self.mesh_name_china.append(f"{num}）{name}——{name}")
                        self._searched_mesh.append(f"{name}")

                num += 1
if not len(paths) == 0:
    num = 0
    for path in paths:
        num += 1
        if self.pattern_tex.match(path) is not None:
            name = path.split('\\')[-1].split('.')[0]
        else:
            continue

        if name not in self.tex_name:
            self.tex_name.append(name)
            self.tex_list_path_dir[name] = path
            try:
                self.tex_name_china.append(f"{num}）{self.names[name]}——{name}")
                self._searched_tex.append(f"{self.names[name]}{name}")
            except KeyError:
                self.tex_name_china.append(f"{num}）{name}——{name}")
                self._searched_tex.append(f"{name}")
self.form.m_gauge_tex_load.SetValue(25)
            num = 0
            for path in paths.keys():
                path_old = path
                if self.pattern_tex.match(path) is not None:
                    path = path.split('\\')[-1].split('.')[0]
                else:
                    continue

                if path not in self.tex_name:
                    self.tex_list_path_dir[path] = paths[path_old]
                    self.tex_name.append(path)
                    try:
                        self.tex_name_china.append(f"{num}）{self.names[path]}——{path}")
                        self._searched_tex.append(f"{self.names[path]}{path}")
                    except KeyError:
                        self.tex_name_china.append(f"{num}）{path}——{path}")
                        self._searched_tex.append(f"{path}")
                num += 1
                self.form.m_gauge_tex_load.SetValue(25 + function.re_int(75 * (num / len(paths.keys()))))
        self.form.m_staticText_load_tex.SetLabel("完成")

        self.form.m_listBox_tex.Set(self.tex_name_china)
self.form.m_gauge_tex_load.SetValue(25)
            self.form.m_gauge_mesh_load.SetValue(25)
            tex_num = 0
            mesh_num = 0
            for path in paths.keys():
                # Mesh
                if self.pattern_mesh.match(path) is not None:
                    path_old = path
                    path = path.split('\\')[-1].split('.')[0].replace('-mesh', '')

                    if path not in self.mesh_name:
                        self.mesh_list_path_dir[path] = paths[path_old]
                        self.mesh_name.append(path)
                        try:
                            self.mesh_name_china.append(f"{mesh_num}）{self.names[path]}——{path}")
                            self._searched_mesh.append(f"{self.names[path]}{path}")
                        except KeyError:
                            self.mesh_name_china.append(f"{mesh_num}）{path}——{path}")
                            self._searched_mesh.append(f"{path}")

                    mesh_num += 1
                    self.form.m_gauge_mesh_load.SetValue(25 + function.re_int(75 * (mesh_num / len(paths.keys()))))

                # texture2D
                elif self.pattern_tex.match(path) is not None:
                    path_old = path
                    path = path.split('\\')[-1].split('.')[0]
                    if path not in self.tex_name:
                        self.tex_list_path_dir[path] = paths[path_old]
                        self.tex_name.append(path)
                        try:
                            self.tex_name_china.append(f"{tex_num}）{self.names[path]}——{path}")
                            self._searched_tex.append(f"{self.names[path]}{path}")
                        except KeyError:
                            self.tex_name_china.append(f"{tex_num}）{path}——{path}")
                            self._searched_tex.append(f"{path}")
                    tex_num += 1
                    self.form.m_gauge_tex_load.SetValue(25 + function.re_int(75 * (tex_num / len(paths.keys()))))
                else:
                    continue

            self.form.m_gauge_tex_load.SetValue(100)
            self.form.m_gauge_mesh_load.SetValue(100)

            self.form.m_listBox_tex.Set(self.tex_name_china)
            self.form.m_listBox_mesh.Set(self.mesh_name_china)

def find(string, array_enter):
    # one->index two->value
    if not array_enter:
        return array_enter
    able_next = [[], []]
    indexes = range(get_longest(array_enter))
    text_val = string[0]
    able_index = []
    array_copy = [[index, array_enter[index]] for index in range(len(array_enter))]
    pass_list = []

    for index in indexes:
        for value in range(len(array_enter)):
            try:
                val1 = (array_copy[value][1][index]).lower()
            except IndexError:
                continue

            if val1 == text_val and value not in pass_list:
                able_next[0].append(value)
                able_index.append(value)
                pass_list.append(value)
                able_next[1].append(array_enter[value][index + 1:])

    string = string[1:]
    if len(able_next) >= 1 and len(string) > 0:
        value = find(string, able_next[1])
        able_index = []
        for index in value:
            able_index.append(able_next[0][index])
        return able_index
    else:
        return able_index

 for name in self.mesh_name:
            if name in self.tex_name:
                self.able_restore += 1
                self.able_restore_list.append(name)
        if self.able_restore >= 1:
            num = 0
            self.unable_restore_list = []
            self.unable_restore_list_showed.clear()
            for name in self.tex_name:
                if name not in self.mesh_name and name.split(' ')[0] != "UISprite":
                    num += 1
                    try:
                        self.unable_restore_list_showed.append("%d） %s" % (num, self.names[name]))
                    except KeyError:
                        self.unable_restore_list_showed.append("%d） %s" % (num, name))
                    self.unable_restore_list.append(name)
                    try:
                        self._search_unable.append(f"{name}{self.names[name]}")
                    except KeyError:
                        self._search_unable.append(f"{name}{name}")

            self.form.m_listBox_unable.Clear()
            self.form.m_listBox_unable.Set(self.unable_restore_list_showed)

        if len(self.tex_name) >= 1:
            self.able_add = True
        else:
            self.able_add = False

        return self.able_restore >= 1



        for name in self.mesh_name:

            try:
                self.mesh_name_china.append(f"{num}）{self.names[name]}——{name}")
                self._searched_mesh.append(f"{self.names[name]}{name}")
            except KeyError:
                self.mesh_name_china.append(f"{num}）{name}——{name}")
                self._searched_mesh.append(f"{name}")
            num += 1
        num = 1

        for path in self.tex_name:

            try:
                self.tex_name_china.append(f"{num}）{self.names[path]}——{path}")
                self._searched_tex.append(f"{self.names[path]}{path}")
            except KeyError:
                self.tex_name_china.append(f"{num}）{path}——{path}")
                self._searched_tex.append(f"{path}")
            num += 1

        num = 1
        for able in self.passed_list:

            try:
                self.passed_show.append('%s——%s,第%d个' % (self.names[able], able, num))
            except KeyError:
                self.passed_show.append('%s——%s,第%d个' % (able, able, num))
            try:
                self._search_skip.append(f"{able}{self.names[able]}")
            except KeyError:
                self._search_skip.append(f"{able}{able}")
            num += 1
        num = 1
        for name in self.unable_restore_list:

            try:
                self.unable_restore_list_showed.append("%d） %s" % (num, self.names[name]))
            except KeyError:
                self.unable_restore_list_showed.append("%d） %s" % (num, name))
            try:
                self._search_unable.append(f"{name}{self.names[name]}")
            except KeyError:
                self._search_unable.append(f"{name}{name}")


 had = []
    list_keep = os.listdir(dir_name)
    diction = {}
    dir_list = []
    file_name_list = []
    file_list = []
    for file in list_keep:
        if not isfile(dir_name + "\\" + file) and not (file in had):
            dir_list.append(file)
        elif file.split(' ')[0] == "UISprite":
            pass
        elif file.split(' ')[-1][0] == "#":
            temp = file.split('\\')[-1].lower().replace('.png', '').split(" ")
            if temp[0].split("_")[-1].lower() == "alpha":
                temp = '_Alpha ' + temp[-1]
                file_list.append(file)
                file_name_list.append(file.replace(temp, "_again_Alpha"))
            else:
                temp = " " + temp[-1]
                file_list.append(file)
                file = file.replace(temp, "_again")
                file_name_list.append(file)

        else:
            file_list.append(file)
            file_name_list.append(file)
    for file in dir_list:
        re = all_file_path(dir_name + "\\" + file)
        had.extend(re[0])
        file_name_list.extend(re[0])
        for keys in re[1]:
            diction[keys] = re[1][keys]
    for index in range(len(file_name_list)):
        if not file_name_list[index] in had:
            diction[file_name_list[index]] = dir_name + "\\" + file_list[index]
            file_list[index] = dir_name + "\\" + file_list[index]

    return file_list, diction